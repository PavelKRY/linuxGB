apt install docker compose
apt install mysql-server
apt install php
mkdir wordpress && cd wordpress
mkdir nginx-conf
nano nginx-conf/nginx.conf
*server {
        listen 80;
        listen [::]:80;

        server_name example.com www.example.com;

        index index.php index.html index.htm;

        root /var/www/html;

        location ~ /.well-known/acme-challenge {
                allow all;
                root /var/www/html;
        }

        location / {
                try_files $uri $uri/ /index.php$is_args$args;
        }

        location ~ \.php$ {
                try_files $uri =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass wordpress:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        location ~ /\.ht {
                deny all;
        }

        location = /favicon.ico {
                log_not_found off; access_log off;
        }
        location = /robots.txt {
                log_not_found off; access_log off; allow all;
        }
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
                expires max;
                log_not_found off;
        }
}
*
mysql
mysqladmin password -u root -p
123456
123456
mysql -u root -p
CREATE USER 'pavel_user'@'%' IDENTIFIED BY '123456';

nano .env
*
MYSQL_ROOT_PASSWORD=1
MYSQL_USER=pavel_user
MYSQL_PASSWORD=123456
*
git init
nano .gitignore
*.env*
nano .dockerignore
*
.env
.git
docker-compose.yml
.dockerignore
*
nano docker-compose.yml
*
version: '3'

services:
    vboxuser:
        image: mysql:8.0
        container_name:vboxuser
        restart: unless-stopped
        env_file: .env
        environment:
            - MYSQL_DATABASE=wordpress
        volumes:
            - vboxuserdata:/var/lib/mysql
        command: '--default-authentication-plugin=mysql_native_password'
        networks:
            - app-network

    wordpress:
        depends_on:
            - vboxuser
        image: wordpress:5.1.1-fpm-alpine
        container_name: wordpress
        restart: unless-stopped
        env_file: .env
        environment:
            - WORDPRESS_VBOXUSER_HOST=vboxuser:3306 
            - WORDPRESS_VBOXUSER_USER=$MYSQL_USER 
            - WORDPRESS_VBOXUSER_PASSWORD=$MYSQL_PASSWORD    
            - WORDPRESS_VBOXUSER_NAME=wordpress
        volumes:
            - wordpress:/var/www/html
        networks:
            - app-network

    webserver:
        depends_on:
            - wordpress
        image: nginx:1.15.12-alpine
        container_name: webserver
        restart: unless-stopped
        ports:
            - "80:80"
        volumes:
            - wordpress:/var/www/html
            - ./nginx-conf:/etc/nginx/conf .d
            - certbot-etc:/etc/letsencrypt
        networks:
            - app-network

    certbot:
        depends_on:
            - webserver
        image: certbot/certbot
        conteiner_name: certbot
        volumes:
            - certbot-etc:/etc/letsencrypt
            - word press:/var/html
        command: certonly --webroot --webroot-path=/var/www/html --email sammy@example.com --agree-tos --no-eff-email --stagging -d example.com -d www.example.com   
volumes:
    certbot-etc:
    wordpress:
    vboxuserdata:

networks:
    app-network:
        driver: bridge
*
docker-compose up -d     
systemctl stop nginx
docker-compose up -d
docker-compose ps
docker-compose logs vboxuser
apt-get update
apt install curl --fix-missing -y
curl -sSLo nginx-conf/options-ssl-nginx.conf https:/raw.githubusercontent,com/certbot/certbot/master/certbot-nginx/_internal/tls_configs/options-ssl-nginx.conf
rm nginx-conf/nginx.conf
nano nginx-conf/nginx.conf
*
server {
        listen 80;
        listen [::]:80;

        server_name example.com www.example.com;

        location ~ /.well-known/acme-challenge {
                allow all;
                root /var/www/html;
        }

        location / {
                rewrite ^ https://$host$request_uri? permanent;
        }
}

server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name example.com www.example.com;

        index index.php index.html index.htm;

        root /var/www/html;

        server_tokens off;

        ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

        include /etc/nginx/conf.d/options-ssl-nginx.conf;

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        # enable strict transport security only if you understand the implications

        location / {
                try_files $uri $uri/ /index.php$is_args$args;
        }

        location ~ \.php$ {
                try_files $uri =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass wordpress:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        location ~ /\.ht {
                deny all;
        }

        location = /favicon.ico {
                log_not_found off; access_log off;
        }
        location = /robots.txt {
                log_not_found off; access_log off; allow all;
        }
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
                expires max;
                log_not_found off;
        }
}
*
nano docker-compose.yml
*
version: '3'

services:
  db:
    image: mysql:8.0
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_DATABASE=wordpress
    volumes:
      - dbdata:/var/lib/mysql
    command: '--default-authentication-plugin=mysql_native_password'
    networks:
      - app-network

  wordpress:
    depends_on:
      - db
    image: wordpress:5.1.1-fpm-alpine
    container_name: wordpress
    restart: unless-stopped
    env_file: .env
    environment:
      - WORDPRESS_DB_HOST=db:3306
      - WORDPRESS_DB_USER=$MYSQL_USER
      - WORDPRESS_DB_PASSWORD=$MYSQL_PASSWORD
      - WORDPRESS_DB_NAME=wordpress
    volumes:
      - wordpress:/var/www/html
    networks:
      - app-network

  webserver:
    depends_on:
      - wordpress
    image: nginx:1.15.12-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - wordpress:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
    networks:
      - app-network

  certbot:
    depends_on:
      - webserver
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - wordpress:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email sammy@example.com --agree-tos --no-eff-email --force-renewal -d example.com -d www.example.com

volumes:
  certbot-etc:
  wordpress:
  dbdata:

networks:
  app-network:
    driver: bridge  
* 
docker-compose stop webserver
docker-compose up -d --force-recreate --no-deps webserver    
docker-compose ps
docker-compose start
docker-compose ps
nano nginx-conf/nginx.conf
*
**удалить всё и прописать:
server {
        listen 80;
        listen [::]:80;

        server_name example.com www.example.com;

        index index.php index.html index.htm;

        root /var/www/html;

        location ~ /.well-known/acme-challenge {
                allow all;
                root /var/www/html;
        }

        location / {
                try_files $uri $uri/ /index.php$is_args$args;
        }

        location ~ \.php$ {
                try_files $uri =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass wordpress:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        location ~ /\.ht {
                deny all;
        }

        location = /favicon.ico {
                log_not_found off; access_log off;
        }
        location = /robots.txt {
                log_not_found off; access_log off; allow all;
        }
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
                expires max;
                log_not_found off;
        }
}
*
docker-compose start webserver
docker-compose up -d --force-recreate --no-deps webserver    
docker-compose ps
docker-compose stop webserver
docker-compose up -d --force-recreate --no-deps webserver    
docker-compose ps
**переход в веб-браузер
страничка:
localhost
***
Test site
test-user
123456
salat.2011@mail.ru
